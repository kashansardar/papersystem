/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package papersystem;

import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import papersystem.helper.DBManager;
import papersystem.helper.PaperPrinter;

/**
 *
 * @author Abbasi
 */
public class savedPaperPanel extends javax.swing.JPanel {

    /**
     * Creates new form savedPaperPanel
     */
    //stores records of all saved papers for selected subjected...
    //edited by subject combobox listener...
    ArrayList<HashMap<String, String>> records = null;

    public savedPaperPanel() {
        initComponents();

        //set table column widths...
        TableColumn column = null;
        for (int i = 0; i < table.getColumnCount(); i++) {
            column = table.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(5);
            }
            if (i == 1) {
                column.setPreferredWidth(600);
            } else {
                column.setPreferredWidth(200);
            }
        }

        //allow only one row to be selected...
        table.setSelectionModel(new ForcedListSelectionModel());

//        table.setValueAt("ASD", 0, 0);
        //Deleting all rows..
//        emptyTable(table);
        subjectComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    //get saved papers for subject from DB
                    String subject = subjectComboBox.getSelectedItem().toString().trim();
                    String classx = classComboBox.getSelectedItem().toString().trim();

                    records = DBManager
                            .getInstance().getSavedPapersForSubject(
                                    DBManager.getInstance().findSubjectID(subject, classx, null));

                    updateTable(table);

                }
            }
        });
        classComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateSubjectComboBox();
                }
            }
        });
        updateClassComboBox();
        updateSubjectComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        subjectComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        answerButton = new javax.swing.JButton();
        questionButton = new javax.swing.JButton();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(808, 600));

        classComboBox.setLightWeightPopupEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Class:");
        jLabel1.setVerifyInputWhenFocusTarget(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Subject:");

        subjectComboBox.setLightWeightPopupEnabled(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Paper Name", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setOpaque(false);
        jScrollPane1.setViewportView(table);

        deleteButton.setText("Delete");
        deleteButton.setOpaque(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        answerButton.setText("Answer Paper");
        answerButton.setOpaque(false);
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        questionButton.setText("Question Paper");
        questionButton.setOpaque(false);
        questionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(questionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(57, 57, 57)
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(subjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(subjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(answerButton)
                    .addComponent(questionButton))
                .addContainerGap(273, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void questionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionButtonActionPerformed
        int selected = table.getSelectedRow();
        if (selected == -1) {
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Select a paper!");
            return;
        }
        String path = records.get(selected).get("QFILE");
        try {
            Desktop.getDesktop().open(new File(path));
        } catch (IOException ex) {
            Logger.getLogger(savedPaperPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: File doesn't exist");
            return;
        }
    }//GEN-LAST:event_questionButtonActionPerformed

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed
        int selected = table.getSelectedRow();
        if (selected == -1) {
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Select a paper!");
            return;
        }
        String path = records.get(selected).get("AFILE");
        try {
            Desktop.getDesktop().open(new File(path));
        } catch (IOException ex) {
            Logger.getLogger(savedPaperPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: File doesn't exist");
            return;
        }
    }//GEN-LAST:event_answerButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selected = table.getSelectedRow();
        if (selected == -1) {
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Select a paper!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(MainScreen.mainFrame,
                "Are you sure you want to delete selected Paper?", "Confirm",
                JOptionPane.YES_NO_OPTION);
        if (confirm != 0) {
            return;
        }

        String qPath = records.get(selected).get("QFILE");
        String aPath = records.get(selected).get("AFILE");
        //delete files        
        new File(qPath).delete();
        new File(aPath).delete();
        //delete from database
        DBManager.getInstance().deleteSavedPaper(Integer.parseInt(records.get(selected).get("ID")));
        //remove table row
        deleteRow(selected, table);
        //remove  records list value
        records.remove(selected);
        JOptionPane.showMessageDialog(MainScreen.mainFrame, "Select Papers Deleted.");
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JComboBox classComboBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton questionButton;
    private javax.swing.JComboBox subjectComboBox;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void updateClassComboBox() {
        classComboBox.removeAllItems();
        for (String s : DBManager.getInstance().getClasses(null)) {
            classComboBox.addItem(s);
        }
    }

    private void updateSubjectComboBox() {
        subjectComboBox.removeAllItems();
        for (String s : DBManager.getInstance().getSubjects(null, classComboBox.getSelectedItem().toString())) {
            subjectComboBox.addItem(s);
        }
    }

    private void emptyTable(JTable table) {
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    private void updateTable(JTable table) {
        //Deleting all rows..
        emptyTable(table);

        DefaultTableModel dm = (DefaultTableModel) table.getModel();

        for (HashMap<String, String> r : records) {
            dm.addRow(new Object[]{r.get("ID"), r.get("NAME"), r.get("DATE")});
        }
        System.out.println("Updated Records Table");
    }

    private void deleteRow(int selected, JTable table) {
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        dm.removeRow(selected);
    }
}

//class used to modify our jtable...
class ForcedListSelectionModel extends DefaultListSelectionModel {

    public ForcedListSelectionModel() {
        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    @Override
    public void clearSelection() {
    }

    @Override
    public void removeSelectionInterval(int index0, int index1) {
    }

}
