/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package papersystem;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.ScrollPaneLayout;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import papersystem.helper.CustomQuestionSelector;
import papersystem.helper.DBManager;
import papersystem.helper.PaperPrinter;

/**
 *
 * @author Abbasi
 */
public class CustomPatternPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomPatternBody
     */
    DBManager myDBManager = DBManager.getInstance();
    JPanel panelforCBL = new JPanel(new FlowLayout(FlowLayout.LEFT));
    CheckBoxList chapters;
    Border scrollPaneBorder = null;
    CustomPatternPanel thisComponent = null;

    //Data for table...
    ArrayList<String> idList;
    ArrayList<String> typeList;
    //get marks for each type...
    ArrayList<String> marksList;
    //get number of available questions for each type...
    ArrayList<String> availableList;
    //this is a list of list of question types... each element contains
    //a list of questions added to that question type...
    ArrayList<ArrayList<Integer>> listOfQuestionTypes;

    public CustomPatternPanel() {
        initComponents();
        scrollPane.getViewport().setOpaque(false);
        scrollPaneBorder = scrollPane.getBorder();
        thisComponent = this;

        //showTypes.setIcon((new ImageIcon(getClass().getResource(("gen.png")))));
        //showTypes.setBorderPainted(false);
        //showTypes.setFocusPainted(false);
        //showTypes.setContentAreaFilled(false);
        bSelectedGenerate.setIcon((new ImageIcon(getClass().getResource(("gen.png")))));
        bSelectedGenerate.setBorderPainted(false);
        bSelectedGenerate.setFocusPainted(false);
        bSelectedGenerate.setContentAreaFilled(false);

        bRandomGenerate.setIcon((new ImageIcon(getClass().getResource(("gen.png")))));
        bRandomGenerate.setBorderPainted(false);
        bRandomGenerate.setFocusPainted(false);
        bRandomGenerate.setContentAreaFilled(false);

        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        subjectComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateChapterCBL();
                    //Update Table
                    //TODO
                    //updatePatternComboBox();
                }
            }
        });
        classComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateSubjectComboBox();
                    updateChapterCBL();
                }
            }
        });

        updateClassComboBox();
        updateSubjectComboBox();
        updateChapterCBL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        classComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        subjectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        paperName = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        allChaptersRB = new javax.swing.JRadioButton();
        selectedChaptersRB = new javax.swing.JRadioButton();
        checkBoxListHolder = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        dateCustom = new org.jdesktop.swingx.JXDatePicker();
        jLabel7 = new javax.swing.JLabel();
        timeCustom = new javax.swing.JTextField();
        timeUnitsCustom = new javax.swing.JComboBox();
        bRandomGenerate = new javax.swing.JButton();
        bSelectedGenerate = new javax.swing.JButton();
        showTypes = new javax.swing.JButton();

        setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Class:");
        jLabel1.setVerifyInputWhenFocusTarget(false);

        classComboBox.setLightWeightPopupEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Subject:");

        subjectComboBox.setLightWeightPopupEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Paper Name:");

        paperName.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N

        scrollPane.setOpaque(false);
        scrollPane.setPreferredSize(new java.awt.Dimension(750, 481));

        jPanel1.setOpaque(false);

        allChaptersRB.setBackground(new java.awt.Color(249, 249, 249));
        allChaptersRB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        allChaptersRB.setText("All Chapters");
        allChaptersRB.setOpaque(false);
        allChaptersRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allChaptersRBActionPerformed(evt);
            }
        });

        selectedChaptersRB.setBackground(new java.awt.Color(249, 249, 249));
        selectedChaptersRB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectedChaptersRB.setText("Selected Chapters");
        selectedChaptersRB.setOpaque(false);
        selectedChaptersRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedChaptersRBActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Question Title", "Available Numbers", "Optional Question", "No. of Question", "Marks", "Total", "Display"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            boolean[] canEdit = new boolean [] {
                true, false,  false, true,true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getModel().addTableModelListener(
            new TableModelListener()
            {
                public void tableChanged(TableModelEvent evt)
                {
                    tableChangeListener(evt);
                }
            });
            jScrollPane2.setViewportView(table);

            jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel3.setText("Date:");

            dateCustom.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dateCustomActionPerformed(evt);
                }
            });

            jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jLabel7.setText("Time:");

            timeCustom.setToolTipText("Enter Time");
            timeCustom.setName(""); // NOI18N
            timeCustom.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    timeCustomActionPerformed(evt);
                }
            });

            timeUnitsCustom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mins", "Hrs" }));

            bRandomGenerate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            bRandomGenerate.setText("Random");
            bRandomGenerate.setOpaque(false);
            bRandomGenerate.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bRandomGenerateActionPerformed(evt);
                }
            });

            bSelectedGenerate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            bSelectedGenerate.setText("Selected");
            bSelectedGenerate.setOpaque(false);
            bSelectedGenerate.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    bSelectedGenerateActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(allChaptersRB)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(selectedChaptersRB))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(checkBoxListHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(bSelectedGenerate)
                                    .addGap(18, 18, 18)
                                    .addComponent(bRandomGenerate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(dateCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(timeCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(timeUnitsCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel7)))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(30, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(allChaptersRB)
                        .addComponent(selectedChaptersRB))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(checkBoxListHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel7))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dateCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(timeCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(timeUnitsCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bRandomGenerate)
                                    .addComponent(bSelectedGenerate)))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            scrollPane.setViewportView(jPanel1);

            showTypes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            showTypes.setText("Apply");
            showTypes.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    showTypesActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(showTypes))
                            .addGap(57, 57, 57)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(subjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(paperName)))))
                    .addContainerGap(240, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(subjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(paperName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(showTypes)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE))
            );
        }// </editor-fold>//GEN-END:initComponents

    //when show button is clicked...
    private void showTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTypesActionPerformed
        idList = DBManager.getInstance().getQuestionTypeIDsForSubject(
                DBManager.getInstance().findSubjectID(subjectComboBox.getSelectedItem().toString().trim(),
                        classComboBox.getSelectedItem().toString().trim(),
                        "default"));
        typeList = DBManager.getInstance().getQuestionTypeNamesByIDs(idList);
        //get marks for each type...
        marksList = DBManager.getInstance().getQuestionTypeMarksByIDs(idList);
        //get number of available questions for each type...
        availableList = DBManager.getInstance().getListOfNumberofAvailableQuestionsByQTypeIDs(
                idList,
                chapters.getSelected(),
                "" + DBManager.getInstance().findSubjectID(
                        subjectComboBox.getSelectedItem().toString().trim(),
                        classComboBox.getSelectedItem().toString().trim(),
                        "default"), classComboBox.getSelectedItem().toString().trim());
        updateTable();

        initializeQuestionsList();
    }//GEN-LAST:event_showTypesActionPerformed

    private void selectedChaptersRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedChaptersRBActionPerformed
        if (selectedChaptersRB.isSelected()) {
            System.out.println("Selected Chapters");
            chapters.loadState();
            chapters.enableEditing();
            allChaptersRB.setSelected(false);
        } else {
            selectedChaptersRB.setSelected(true);
        }
    }//GEN-LAST:event_selectedChaptersRBActionPerformed

    private void allChaptersRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allChaptersRBActionPerformed
        if (allChaptersRB.isSelected()) {
            System.out.println("All Chapters");
            chapters.saveState();
            chapters.selectAll();
            chapters.disableEditing();
            selectedChaptersRB.setSelected(false);
        } else {
            allChaptersRB.setSelected(true);
        }
    }//GEN-LAST:event_allChaptersRBActionPerformed

    private void timeCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeCustomActionPerformed

    }//GEN-LAST:event_timeCustomActionPerformed

    private void bRandomGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRandomGenerateActionPerformed
        if (!inputFieldAreErrorFree()) {
            return;
        }

        String date = (dateCustom.getDate().getDate()) + "-" + PaperSystem.getMonthText((dateCustom.getDate().getMonth() + 1)) + "-" + (dateCustom.getDate().getYear() + 1900);
        String time = timeCustom.getText() + " " + timeUnitsCustom.getSelectedItem().toString();
        String instructions = null;
//        String instructions = instructionsCustom.getText();
//        if (instructions.length() == 0) {
//            instructions = null;
//        }
        //insert temporary pattern in db

        //prepare toAsk value..
        //prepare a string of types name values...
        //prepare toAns value..
        String typesValue = "";
        String toAsk = "";
        String toAns = "";
        String marks = "";
        int totalMarks = 0;

        for (int i = 0; i < table.getRowCount(); i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            typesValue = typesValue + typeList.get(i);
            if (i != table.getRowCount() - 1) {
                typesValue = typesValue + "\n";
            }
            toAsk = toAsk + ((String) table.getValueAt(i, 3)).trim() + ";";
            toAns = toAns + ((String) table.getValueAt(i, 4)).trim() + ";";
            marks = marks + ((String) table.getValueAt(i, 5)).trim() + ";";
            totalMarks = totalMarks + Integer.parseInt(((String) table.getValueAt(i, 6)).trim());
        }

        //get pattern id..
        int patternID = DBManager.getInstance().insertTemporaryPattern(typesValue,
                toAsk,
                toAns,
                marks,
                -100,//fake subject id...
                "fake information",
                "fixedblablabla",
                totalMarks);

        new PaperPrinter().print(chapters.getSelected(), paperName.getText(),
                date, time,
                instructions,
                classComboBox.getSelectedItem().toString(),
                subjectComboBox.getSelectedItem().toString(),
                patternID, "default",
                MainScreen.mainFrame);
    }//GEN-LAST:event_bRandomGenerateActionPerformed

    private void dateCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateCustomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateCustomActionPerformed

    private void bSelectedGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectedGenerateActionPerformed
        if (!inputFieldAreErrorFree()) {
            return;
        }

        String date = (dateCustom.getDate().getDate()) + "-" + PaperSystem.getMonthText((dateCustom.getDate().getMonth() + 1)) + "-" + (dateCustom.getDate().getYear() + 1900);
        String time = timeCustom.getText() + " " + timeUnitsCustom.getSelectedItem().toString();
        String instructions = null;
//        String instructions = instructionsCustom.getText();
//        if (instructions.length() == 0) {
//            instructions = null;
//        }

        //check for errors in selected questions...
        for (int i = 0; i < table.getRowCount(); i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            int toAsk = Integer.parseInt(((String) table.getValueAt(i, 3)).trim());
            if (listOfQuestionTypes.get(i).size() != toAsk) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Please Select " + toAsk + " Questions by clicking show.");
                return;
            }
        }

        //make a copy of listOfQuestionTypes with non empty types only.
        ArrayList<ArrayList<Integer>> tempListOfQuestionTypes = new ArrayList<>();
        for (int i = 0; i < table.getRowCount(); i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            tempListOfQuestionTypes.add(listOfQuestionTypes.get(i));
        }

        //insert temporary pattern in db
        //prepare toAsk value..
        //prepare a string of types name values...
        //prepare toAns value..
        String typesValue = "";
        String toAsk = "";
        String toAns = "";
        String marks = "";
        int totalMarks = 0;

        for (int i = 0; i < table.getRowCount(); i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            typesValue = typesValue + typeList.get(i);
            if (i != table.getRowCount() - 1) {
                typesValue = typesValue + "\n";
            }
            toAsk = toAsk + ((String) table.getValueAt(i, 3)).trim() + ";";
            toAns = toAns + ((String) table.getValueAt(i, 4)).trim() + ";";
            marks = marks + ((String) table.getValueAt(i, 5)).trim() + ";";
            totalMarks = totalMarks + Integer.parseInt(((String) table.getValueAt(i, 6)).trim());
        }

        //get pattern id..
        int patternID = DBManager.getInstance().insertTemporaryPattern(typesValue,
                toAsk,
                toAns,
                marks,
                -100,//fake subject id...
                "fake information",
                "fixedblablabla",
                totalMarks);

        new PaperPrinter().print_Custom(chapters.getSelected(), paperName.getText(),
                date, time,
                instructions,
                classComboBox.getSelectedItem().toString(),
                subjectComboBox.getSelectedItem().toString(),
                patternID, "default",
                MainScreen.mainFrame,
                tempListOfQuestionTypes);
    }//GEN-LAST:event_bSelectedGenerateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allChaptersRB;
    public javax.swing.JButton bRandomGenerate;
    private javax.swing.JButton bSelectedGenerate;
    private javax.swing.JScrollPane checkBoxListHolder;
    private javax.swing.JComboBox classComboBox;
    public org.jdesktop.swingx.JXDatePicker dateCustom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField paperName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JRadioButton selectedChaptersRB;
    private javax.swing.JButton showTypes;
    private javax.swing.JComboBox subjectComboBox;
    private javax.swing.JTable table;
    public javax.swing.JTextField timeCustom;
    public javax.swing.JComboBox timeUnitsCustom;
    // End of variables declaration//GEN-END:variables

    private void updateClassComboBox() {
        classComboBox.removeAllItems();
        for (String s : myDBManager.getClasses(null)) {
            classComboBox.addItem(s);
        }
    }

    private void updateSubjectComboBox() {
        subjectComboBox.removeAllItems();
        for (String s : myDBManager.getSubjects(null, classComboBox.getSelectedItem().toString())) {
            subjectComboBox.addItem(s);
        }
        updateChapterCBL();
        //Update Table
        //TODO
        //updatePatternComboBox();
    }

    private void updateChapterCBL() {
        System.out.println(classComboBox.getSelectedItem().toString());
        System.out.println(subjectComboBox.getSelectedItem().toString());
        chapters = new CheckBoxList(1, 2, myDBManager.getChapters(null, classComboBox.getSelectedItem().toString(), subjectComboBox.getSelectedItem().toString()));

        selectedChaptersRB.setSelected(false);
        allChaptersRB.setSelected(true);
        chapters.disableEditing();
        panelforCBL.removeAll();
        panelforCBL.add(chapters);
        checkBoxListHolder.setViewportView(panelforCBL);
        checkBoxListHolder.getViewport().setBackground(Color.white);
        checkBoxListHolder.setBackground(Color.white);
        checkBoxListHolder.repaint();
        revalidate();
    }

    private void updateTable() {
        //customData.tableCustom.set
        table.setFillsViewportHeight(true);

        //table.getTableHeader().setPreferredSize(new Dimension(100, 100));
        //table = new JTable(rowData, columnNames);
        TableColumn column = null;
        int colCount = table.getColumnModel().getColumnCount();
        for (int i = 0; i < colCount; i++) {
            column = table.getColumnModel().getColumn(i);
            if (i == 1) {
                column.setPreferredWidth(300);
            } else if (i == 2) {
                column.setPreferredWidth(51);
            } else if (i == 7) {
                column.setPreferredWidth(55);
            } else {
                column.setPreferredWidth(30);
            }
        }

        //Add show buttons
        table.getColumn("Display").setCellRenderer(new ButtonRenderer());
        table.getColumn("Display").setCellEditor(new ButtonEditor(new JCheckBox("Display")));

        //remove all table rows..
        DefaultTableModel dm = (DefaultTableModel) table.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }

        //update table
        for (int i = 0; i < idList.size(); i++) {
            dm.addRow(new Object[]{});
            String qType = typeList.get(i);
            qType = "<html>" + qType + "</html>";
            table.setValueAt(qType, i, 1);
            table.setValueAt(availableList.get(i), i, 2);
            table.setValueAt(marksList.get(i), i, 5);
        }
        for (int i = 0; i < table.getRowCount(); i++) {

            int length1 = ((String) table.getValueAt(i, 1)).length();
            int length2 = "Select and write the most appropriate answers from given".length();
            if (length1 > length2) {
                table.setRowHeight(i, 40);
            } else {
                table.setRowHeight(i, 25);
            }
        }
    }

    private void initializeQuestionsList() {
        listOfQuestionTypes = new ArrayList<>();
        for (Object c : idList) {
            listOfQuestionTypes.add(new ArrayList<>());
        }
    }

    private boolean inputFieldAreErrorFree() {
        if (paperName.getText() == null || paperName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Paper Name.");
            return false;
        }
        try {
            System.out.println(dateCustom.getDate().toString());
        } catch (Exception e22) {
            JOptionPane.showMessageDialog(null, "Please enter a Date.");
            return false;
        }
        if (timeCustom.getText() == null || timeCustom.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter time for Paper.");
            return false;
        }

        int rows = table.getRowCount();

        //check if atleast one questiontype is selected.
        boolean oneTypeSelected = false;
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) != null && Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                oneTypeSelected = true;
            }
        }
        if (!oneTypeSelected) {
            JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Select atleast one Question Type ");
            return false;
        }

        //check to ask validity
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            String toAsk = (String) table.getValueAt(i, 3);
            try {
                if (toAsk == null) {
                    throw new NumberFormatException();
                }
                int toAskInt = Integer.parseInt(toAsk.trim());
                if (toAskInt <= 0) {
                    throw new NumberFormatException();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Enter valid number of Questions to Ask");
                return false;
            }
        }
        //check avaiable>=to ask 
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }

            String toAsk = (String) table.getValueAt(i, 3);
            String available = (String) table.getValueAt(i, 2);
            try {
                int availableInt = Integer.parseInt(available.trim());
                int toAskInt = Integer.parseInt(toAsk.trim());

                if (toAskInt > availableInt) {
                    throw new Exception();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Number of questions to Ask can't be more than Available");
                return false;
            }
        }
        //check to ans validity
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            String toAns = (String) table.getValueAt(i, 4);
            try {
                if (toAns == null) {
                    throw new NumberFormatException();
                }
                int toAnsInt = Integer.parseInt(toAns.trim());
                if (toAnsInt <= 0) {
                    throw new NumberFormatException();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Enter valid number of Questions to Ans");
                return false;
            }
        }
        //check to ans<=to ask 
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }

            String toAsk = (String) table.getValueAt(i, 3);
            String toAns = (String) table.getValueAt(i, 4);
            try {
                int toAnsInt = Integer.parseInt(toAns.trim());
                int toAskInt = Integer.parseInt(toAsk.trim());

                if (toAskInt < toAnsInt) {
                    throw new Exception();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Number of questions to Ask can't be less than to Ans");
                return false;
            }
        }
        //check marks validity
        for (int i = 0; i < rows; i++) {
            //if row is not selected, check next row...
            if (table.getValueAt(i, 0) == null || !Boolean.valueOf(table.getValueAt(i, 0).toString())) {
                continue;
            }
            String marks = (String) table.getValueAt(i, 5);
            try {
                if (marks == null) {
                    throw new NumberFormatException();
                }
                int marksInt = Integer.parseInt(marks.trim());
                if (marksInt <= 0) {
                    throw new NumberFormatException();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                        + (i + 1) + "\n"
                        + "Enter valid Marks for Question");
                return false;
            }
        }

        return true;
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setPreferredSize(new Dimension(59, 23));
            setMaximumSize(new Dimension(59, 23));
            setText((value == null) ? "Display" : value.toString());
            return this;
        }
    }

    /**
     * @version 1.0 11/09/98
     */
    class ButtonEditor extends DefaultCellEditor {

        protected JButton button;
        private String label;
        private boolean isPushed;
        int x, y;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Display");
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            label = (value == null) ? "Display" : value.toString();
            button.setPreferredSize(new Dimension(59, 23));
            button.setMaximumSize(new Dimension(59, 23));
            button.setText(label);
            isPushed = true;
            x = row;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                //JOptionPane.showMessageDialog(button, label + ": Ouch!");
                if (table.getValueAt(x, 0) == null || !Boolean.valueOf(table.getValueAt(x, 0).toString())) {
                    JOptionPane.showMessageDialog(MainScreen.mainFrame,
                            "Error: Please select the question type first");
                    return new String(label);
                }
                String toAsk = (String) table.getValueAt(x, 3);
                try {
                    int toAskInt = Integer.parseInt(toAsk.trim());
                    if (toAskInt <= 0) {
                        throw new NumberFormatException();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(MainScreen.mainFrame, "Error: Row "
                            + (x + 1) + "\n"
                            + "Enter valid number of Questions to Ask");
                    return new String(label);
                }

                String totalQ = (String) table.getValueAt(x, 2);
                JOptionPane.showMessageDialog(MainScreen.mainFrame, "Loading " + totalQ + " questions. This may take a while.",
                        "Press OK to continue", JOptionPane.INFORMATION_MESSAGE);

                CustomQuestionSelector.createSelector(Integer.parseInt(idList.get(x)),
                        Integer.parseInt(((String) table.getValueAt(x, 3)).trim()),
                        x,
                        chapters.getSelected(), thisComponent);
            }
            isPushed = false;
            return new String(label);
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }

    public void tableChangeListener(TableModelEvent evt) {

        if (evt.getType() == TableModelEvent.UPDATE) {
            if (evt.getColumn() != 3 && evt.getColumn() != 4 && evt.getColumn() != 5) {
                return;
            }
            System.out.println("Cell " + evt.getFirstRow() + ", " + evt.getColumn() + " changed."
                    + " The new value: " + table.getValueAt(evt.getFirstRow(), evt.getColumn()));

            String toAns = (String) table.getValueAt(evt.getFirstRow(), 4);
            String marks = (String) table.getValueAt(evt.getFirstRow(), 5);
            try {
                if (toAns == null) {
                    throw new NumberFormatException();
                }
                if (marks == null) {
                    throw new NumberFormatException();
                }
                int toAnsInt = Integer.parseInt(toAns.trim());
                int marksInt = Integer.parseInt(marks.trim());
                if (toAnsInt <= 0) {
                    throw new NumberFormatException();
                }
                if (marksInt <= 0) {
                    throw new NumberFormatException();
                }
                table.setValueAt("" + (marksInt * toAnsInt), evt.getFirstRow(), 6);
            } catch (Exception e) {
                return;
            }
        }
    }

    //this function takes a list of questions..
    //and puts it in listOfQuestionTypes based on rowNumber given..
    public void updateQuestionsList(ArrayList<Integer> questions, int rowNum) {
        listOfQuestionTypes.get(rowNum).clear();
        listOfQuestionTypes.get(rowNum).addAll(questions);
    }
}
